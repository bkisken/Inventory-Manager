import requests
import tkinter
from tkinter import ttk
from tkinter import messagebox

from ebayscrap import search_shoes, calculate_metrics  # Make sure these are imported from your ebayscrap module


API_KEY = '3bkTDDs71+6Kl1DWe/zO2g==c7gmB5H52xxBCiMD'


def get_tax_rate(zip_code):
    api_url = f'https://api.api-ninjas.com/v1/salestax?zip_code={zip_code}'
    response = requests.get(api_url, headers={'X-Api-Key': API_KEY})

    if response.status_code == requests.codes.ok:
        data = response.json()
        print("API Response:", data)

        if isinstance(data, list) and len(data) > 0:
            if 'total_rate' in data[0]:
                return float(data[0]['total_rate'])
            else:
                print("Key 'total_rate' not found in the response.")
                return None
        else:
            print("Unexpected response format.")
            return None
    else:
        messagebox.showwarning("Error", f"Failed to retrieve tax info for ZIP {zip_code}")
        return None


def calculate_total_price(show_popup=True):
    retail_value = retail_price_entry.get()
    zip_code = zip_code_entry.get()

    if retail_value.strip() == '' or zip_code.strip() == '':
        messagebox.showwarning(title="Error", message="Retail Price and Zip Code are required.")
        return

    try:
        retail = float(retail_value)

        # Fetch tax rate based on the zip code
        tax = get_tax_rate(zip_code)
        if tax is None:
            return

        discounted_price = retail

        # Apply all discounts
        for discount_type_combobox, discount_amount_entry in discount_entries:
            discount_type = discount_type_combobox.get()
            discount_amount_value = discount_amount_entry.get()

            if discount_type and discount_type != "None":
                discount_amount = float(discount_amount_value) if discount_amount_value.strip() else 0

                if discount_type == "Cash" or discount_type == "Both":
                    discounted_price -= discount_amount
                elif discount_type == "Percent":
                    discounted_price -= (discount_amount / 100) * discounted_price

        # Calculate tax amount and total price
        tax_amount = discounted_price * tax
        total_price = discounted_price + tax_amount

        if show_popup:
            messagebox.showinfo("Total Price", f"The total price is: {total_price:.2f}")
        return total_price

    except ValueError as e:
        print(e)
        messagebox.showwarning(title="Error", message="Please enter valid numbers.")


def fetch_ebay_data():
    sku = sku_entry.get().strip()
    if not sku:
        messagebox.showinfo("Info", "Please enter a SKU.")
        return
    
    df = search_shoes(sku)
    if df is None or df.empty:
        messagebox.showinfo("No Results", "No eBay listings found for that SKU.")
        return
    
    metrics = calculate_metrics(df)
    if metrics:
        message = "\n".join(f"{key.replace('_', ' ').capitalize()}: {value}" for key, value in metrics.items())
        messagebox.showinfo("eBay Sales Metrics", message)


def calculate_break_even():
    total_price = calculate_total_price(show_popup=False)
    if total_price is None:
        return
    try:
        ebay_fee = 0.1325
        final_value_fee = 0.30
        stockx_fee = 0.09
        stockx_cashout_fee = 0.03
        stockx_shipping_fee = 4
        goat_fee = 0.095
        goat_cashout_fee = 0.029
        goat_seller_fee = 5

        ebay_break_even = total_price / (1 - ebay_fee) + final_value_fee
        stockx_break_even = (total_price + stockx_shipping_fee) / (1 - stockx_fee - stockx_cashout_fee)
        goat_break_even = (total_price + goat_seller_fee) / (1 - goat_fee - goat_cashout_fee)

        messagebox.showinfo(
            "Break Even Prices",
            f"eBay: {ebay_break_even:.2f}\nStockX: {stockx_break_even:.2f}\nGoat: {goat_break_even:.2f}"
        )

    except ValueError:
        messagebox.showwarning(title="Error", message="Please enter valid numbers.")


def add_discount():
    # Add new discount type and discount amount fields
    discount_type_label = tkinter.Label(discount_frame, text="Discount Type")
    discount_type_combobox = ttk.Combobox(discount_frame, values=["", "Cash", "Percent", "Both", "None"])
    discount_amount_label = tkinter.Label(discount_frame, text="Discount Amount")
    discount_amount_entry = tkinter.Entry(discount_frame)

    # Place the new widgets
    row_index = len(discount_entries) + 4  # Adjust row index for new entries
    discount_type_label.grid(row=row_index, column=0)
    discount_type_combobox.grid(row=row_index + 1, column=0)
    discount_amount_label.grid(row=row_index, column=1)
    discount_amount_entry.grid(row=row_index + 1, column=1)

    # Add new fields to the discount_entries list
    discount_entries.append((discount_type_combobox, discount_amount_entry))


# Set up the GUI
window = tkinter.Tk()
window.title("Data Entry Form")

frame = tkinter.Frame(window)
frame.pack()

# User Info
user_info_frame = tkinter.LabelFrame(frame, text="Retail Entry")
user_info_frame.grid(row=0, column=0, padx=20, pady=10)

retail_price_entry_label = tkinter.Label(user_info_frame, text="Retail Price")
retail_price_entry_label.grid(row=0, column=0)
retail_price_entry = tkinter.Entry(user_info_frame)
retail_price_entry.grid(row=1, column=0)

# Discount Entry
discount_frame = tkinter.LabelFrame(frame, text="Discount Entry")
discount_frame.grid(row=1, column=0, sticky="news", padx=20, pady=10)

# Initial Discount Entry
discount_type_label = tkinter.Label(discount_frame, text="Discount Type")
discount_type_combobox = ttk.Combobox(discount_frame, values=["", "Cash", "Percent", "Both", "None"])
discount_amount_label = tkinter.Label(discount_frame, text="Discount Amount")
discount_amount_entry = tkinter.Entry(discount_frame)

discount_type_label.grid(row=2, column=0)
discount_type_combobox.grid(row=3, column=0)
discount_amount_label.grid(row=2, column=1)
discount_amount_entry.grid(row=3, column=1)

# List to track discount entries
discount_entries = [(discount_type_combobox, discount_amount_entry)]

# Add Discount Button
add_discount_button = tkinter.Button(discount_frame, text="Add Discount", command=add_discount)
add_discount_button.grid(row=4, column=0, sticky="news", padx=20, pady=10)

# Tax Info (Zip Code)
tax_frame = tkinter.LabelFrame(frame, text="Tax Entry")
tax_frame.grid(row=3, column=0, sticky="news", padx=20, pady=10)

zip_code_label = tkinter.Label(tax_frame, text="Zip Code")
zip_code_label.grid(row=0, column=0)
zip_code_entry = tkinter.Entry(tax_frame)
zip_code_entry.grid(row=1, column=0)

#SKU enter
sku_label = tkinter.Label(tax_frame, text="SKU (Optional)")
sku_label.grid(row=2, column=0)
sku_entry = tkinter.Entry(tax_frame)
sku_entry.grid(row=3, column=0)

# Calculate Buttons
calculate_button = tkinter.Button(frame, text="Calculate Cost", command=calculate_total_price)
calculate_button.grid(row=4, column=0, sticky="news", padx=20, pady=10)

break_even_button = tkinter.Button(frame, text="Calculate Break Even", command=calculate_break_even)
break_even_button.grid(row=5, column=0, sticky="news", padx=20, pady=10)

fetch_button = tkinter.Button(frame, text="Fetch eBay Data", command=fetch_ebay_data)
fetch_button.grid(row=6, column=0, sticky="news", padx=20, pady=10)

window.mainloop()
